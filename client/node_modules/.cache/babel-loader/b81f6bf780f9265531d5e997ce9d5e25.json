{"ast":null,"code":"const express = require(\"express\");\n\nconst app = express();\n\nconst bodyParser = require(\"body-parser\");\n\nconst jsonParser = bodyParser.json();\n\nconst secrets = require(\"./secrets.js\");\n\nconst SpotifyWebApi = require(\"spotify-web-api-node\");\n\nconst PORT = process.env.PORT || 3000;\nvar spotifyApi = new SpotifyWebApi({\n  clientId: secrets.clientId,\n  clientSecret: secrets.clientSecret\n});\n\nasync function setCredentials() {\n  const data = await spotifyApi.clientCredentialsGrant();\n  await spotifyApi.setAccessToken(data.body[\"access_token\"]); // gets secrets and makes a request to Spotify to get an access token; needed for all spotify API requests\n}\n\nasync function getArtistId(artistName) {\n  const data = await spotifyApi.searchArtists(artistName); // returns a list of artist ids that match the artist name param, in popularity order\n\n  return data.body.artists.items[0].id;\n}\n\nasync function getRelatedArtist(artistId) {\n  const data = await spotifyApi.getArtistRelatedArtists(artistId); // returns a list of related artists\n\n  let relatedArtists = [];\n  let i = 0;\n\n  while (i < data.body.artists.length) {\n    const name = data.body.artists[i].name;\n    relatedArtists.push({\n      recommendation: name\n    });\n    i++;\n  }\n\n  var randomArtist = relatedArtists[Math.floor(Math.random() * relatedArtists.length)];\n  return randomArtist.recommendation; // takes list of recommended artists, puts them into an array of objects, then pulls one random artist from the list\n}\n\nasync function getOrderedAlbums(artistId) {\n  const data = await spotifyApi.getArtistAlbums(artistId);\n  let albumNames = [];\n  let i = 0;\n\n  while (i < data.body.items.length) {\n    const name = data.body.items[i].name;\n    const releaseDate = data.body.items[i].release_date;\n    const albumImage = data.body.items[i].images[0];\n    const duplicate = albumNames.some(album => album.album_name === name); // spotify's album data includes lots of duplicates, this removes exact matched duplicates\n\n    if (!duplicate) albumNames.push({\n      album_name: name,\n      release_date: releaseDate,\n      album_image: albumImage\n    });\n    i++; // creates an array of objects, each object containing an album name, release date, and album image\n  }\n\n  function compare(a, b) {\n    if (a.release_date < b.release_date) return 1;\n    if (a.release_date > b.release_date) return -1;\n    return 0;\n  }\n\n  albumNames.sort(compare); // compares the release dates of each album and returns the list of albums in reverse chronological order\n\n  return albumNames[1];\n}\n\nasync function main(artistName) {\n  await setCredentials();\n  let recArtist = await getRelatedArtist(await getArtistId(artistName));\n  let recObject = await getOrderedAlbums(await getArtistId(recArtist));\n  recObject.recommended_artist = recArtist;\n  return recObject;\n}\n\napp.post(\"/\", jsonParser, async function (req, res, next) {\n  let result = await main(req.body.artistName);\n  res.json(result);\n});\napp.listen(PORT, function () {\n  console.log(`Server is running on: ${PORT}`);\n});","map":{"version":3,"sources":["/Users/brsbl/Desktop/jukebox/react-tutorial/src/server.js"],"names":["express","require","app","bodyParser","jsonParser","json","secrets","SpotifyWebApi","PORT","process","env","spotifyApi","clientId","clientSecret","setCredentials","data","clientCredentialsGrant","setAccessToken","body","getArtistId","artistName","searchArtists","artists","items","id","getRelatedArtist","artistId","getArtistRelatedArtists","relatedArtists","i","length","name","push","recommendation","randomArtist","Math","floor","random","getOrderedAlbums","getArtistAlbums","albumNames","releaseDate","release_date","albumImage","images","duplicate","some","album","album_name","album_image","compare","a","b","sort","main","recArtist","recObject","recommended_artist","post","req","res","next","result","listen","console","log"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGF,OAAO,EAAnB;;AACA,MAAMG,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMG,UAAU,GAAGD,UAAU,CAACE,IAAX,EAAnB;;AACA,MAAMC,OAAO,GAAGL,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,sBAAD,CAA7B;;AAEA,MAAMO,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AAEA,IAAIG,UAAU,GAAG,IAAIJ,aAAJ,CAAkB;AACjCK,EAAAA,QAAQ,EAAEN,OAAO,CAACM,QADe;AAEjCC,EAAAA,YAAY,EAAEP,OAAO,CAACO;AAFW,CAAlB,CAAjB;;AAKA,eAAeC,cAAf,GAAgC;AAC9B,QAAMC,IAAI,GAAG,MAAMJ,UAAU,CAACK,sBAAX,EAAnB;AACA,QAAML,UAAU,CAACM,cAAX,CAA0BF,IAAI,CAACG,IAAL,CAAU,cAAV,CAA1B,CAAN,CAF8B,CAG9B;AACD;;AAED,eAAeC,WAAf,CAA2BC,UAA3B,EAAuC;AACrC,QAAML,IAAI,GAAG,MAAMJ,UAAU,CAACU,aAAX,CAAyBD,UAAzB,CAAnB,CADqC,CAErC;;AACA,SAAOL,IAAI,CAACG,IAAL,CAAUI,OAAV,CAAkBC,KAAlB,CAAwB,CAAxB,EAA2BC,EAAlC;AACD;;AAED,eAAeC,gBAAf,CAAgCC,QAAhC,EAA0C;AACxC,QAAMX,IAAI,GAAG,MAAMJ,UAAU,CAACgB,uBAAX,CAAmCD,QAAnC,CAAnB,CADwC,CAExC;;AACA,MAAIE,cAAc,GAAG,EAArB;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGd,IAAI,CAACG,IAAL,CAAUI,OAAV,CAAkBQ,MAA7B,EAAqC;AACnC,UAAMC,IAAI,GAAGhB,IAAI,CAACG,IAAL,CAAUI,OAAV,CAAkBO,CAAlB,EAAqBE,IAAlC;AACAH,IAAAA,cAAc,CAACI,IAAf,CAAoB;AAAEC,MAAAA,cAAc,EAAEF;AAAlB,KAApB;AACAF,IAAAA,CAAC;AACF;;AACD,MAAIK,YAAY,GACdN,cAAc,CAACO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,cAAc,CAACE,MAA1C,CAAD,CADhB;AAEA,SAAOI,YAAY,CAACD,cAApB,CAZwC,CAaxC;AACD;;AAED,eAAeK,gBAAf,CAAgCZ,QAAhC,EAA0C;AACxC,QAAMX,IAAI,GAAG,MAAMJ,UAAU,CAAC4B,eAAX,CAA2Bb,QAA3B,CAAnB;AACA,MAAIc,UAAU,GAAG,EAAjB;AACA,MAAIX,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGd,IAAI,CAACG,IAAL,CAAUK,KAAV,CAAgBO,MAA3B,EAAmC;AACjC,UAAMC,IAAI,GAAGhB,IAAI,CAACG,IAAL,CAAUK,KAAV,CAAgBM,CAAhB,EAAmBE,IAAhC;AACA,UAAMU,WAAW,GAAG1B,IAAI,CAACG,IAAL,CAAUK,KAAV,CAAgBM,CAAhB,EAAmBa,YAAvC;AACA,UAAMC,UAAU,GAAG5B,IAAI,CAACG,IAAL,CAAUK,KAAV,CAAgBM,CAAhB,EAAmBe,MAAnB,CAA0B,CAA1B,CAAnB;AACA,UAAMC,SAAS,GAAGL,UAAU,CAACM,IAAX,CAAiBC,KAAD,IAAWA,KAAK,CAACC,UAAN,KAAqBjB,IAAhD,CAAlB,CAJiC,CAKjC;;AACA,QAAI,CAACc,SAAL,EACEL,UAAU,CAACR,IAAX,CAAgB;AACdgB,MAAAA,UAAU,EAAEjB,IADE;AAEdW,MAAAA,YAAY,EAAED,WAFA;AAGdQ,MAAAA,WAAW,EAAEN;AAHC,KAAhB;AAKFd,IAAAA,CAAC,GAZgC,CAajC;AACD;;AAED,WAASqB,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,QAAID,CAAC,CAACT,YAAF,GAAiBU,CAAC,CAACV,YAAvB,EAAqC,OAAO,CAAP;AACrC,QAAIS,CAAC,CAACT,YAAF,GAAiBU,CAAC,CAACV,YAAvB,EAAqC,OAAO,CAAC,CAAR;AACrC,WAAO,CAAP;AACD;;AACDF,EAAAA,UAAU,CAACa,IAAX,CAAgBH,OAAhB,EAzBwC,CA0BxC;;AACA,SAAOV,UAAU,CAAC,CAAD,CAAjB;AACD;;AAED,eAAec,IAAf,CAAoBlC,UAApB,EAAgC;AAC9B,QAAMN,cAAc,EAApB;AACA,MAAIyC,SAAS,GAAG,MAAM9B,gBAAgB,CAAC,MAAMN,WAAW,CAACC,UAAD,CAAlB,CAAtC;AACA,MAAIoC,SAAS,GAAG,MAAMlB,gBAAgB,CAAC,MAAMnB,WAAW,CAACoC,SAAD,CAAlB,CAAtC;AACAC,EAAAA,SAAS,CAACC,kBAAV,GAA+BF,SAA/B;AACA,SAAOC,SAAP;AACD;;AAEDtD,GAAG,CAACwD,IAAJ,CAAS,GAAT,EAActD,UAAd,EAA0B,gBAAgBuD,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACxD,MAAIC,MAAM,GAAG,MAAMR,IAAI,CAACK,GAAG,CAACzC,IAAJ,CAASE,UAAV,CAAvB;AACAwC,EAAAA,GAAG,CAACvD,IAAJ,CAASyD,MAAT;AACD,CAHD;AAKA5D,GAAG,CAAC6D,MAAJ,CAAWvD,IAAX,EAAiB,YAAW;AAC1BwD,EAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBzD,IAAK,EAA1C;AACD,CAFD","sourcesContent":["const express = require(\"express\");\nconst app = express();\nconst bodyParser = require(\"body-parser\");\nconst jsonParser = bodyParser.json();\nconst secrets = require(\"./secrets.js\");\nconst SpotifyWebApi = require(\"spotify-web-api-node\");\n\nconst PORT = process.env.PORT || 3000\n\nvar spotifyApi = new SpotifyWebApi({\n  clientId: secrets.clientId,\n  clientSecret: secrets.clientSecret,\n});\n\nasync function setCredentials() {\n  const data = await spotifyApi.clientCredentialsGrant();\n  await spotifyApi.setAccessToken(data.body[\"access_token\"]);\n  // gets secrets and makes a request to Spotify to get an access token; needed for all spotify API requests\n}\n\nasync function getArtistId(artistName) {\n  const data = await spotifyApi.searchArtists(artistName);\n  // returns a list of artist ids that match the artist name param, in popularity order\n  return data.body.artists.items[0].id;\n}\n\nasync function getRelatedArtist(artistId) {\n  const data = await spotifyApi.getArtistRelatedArtists(artistId);\n  // returns a list of related artists\n  let relatedArtists = [];\n  let i = 0;\n  while (i < data.body.artists.length) {\n    const name = data.body.artists[i].name;\n    relatedArtists.push({ recommendation: name });\n    i++;\n  }\n  var randomArtist =\n    relatedArtists[Math.floor(Math.random() * relatedArtists.length)];\n  return randomArtist.recommendation;\n  // takes list of recommended artists, puts them into an array of objects, then pulls one random artist from the list\n}\n\nasync function getOrderedAlbums(artistId) {\n  const data = await spotifyApi.getArtistAlbums(artistId);\n  let albumNames = [];\n  let i = 0;\n  while (i < data.body.items.length) {\n    const name = data.body.items[i].name;\n    const releaseDate = data.body.items[i].release_date;\n    const albumImage = data.body.items[i].images[0];\n    const duplicate = albumNames.some((album) => album.album_name === name);\n    // spotify's album data includes lots of duplicates, this removes exact matched duplicates\n    if (!duplicate)\n      albumNames.push({\n        album_name: name,\n        release_date: releaseDate,\n        album_image: albumImage,\n      });\n    i++;\n    // creates an array of objects, each object containing an album name, release date, and album image\n  }\n\n  function compare(a, b) {\n    if (a.release_date < b.release_date) return 1;\n    if (a.release_date > b.release_date) return -1;\n    return 0;\n  }\n  albumNames.sort(compare);\n  // compares the release dates of each album and returns the list of albums in reverse chronological order\n  return albumNames[1];\n}\n\nasync function main(artistName) {\n  await setCredentials();\n  let recArtist = await getRelatedArtist(await getArtistId(artistName));\n  let recObject = await getOrderedAlbums(await getArtistId(recArtist));\n  recObject.recommended_artist = recArtist;\n  return recObject;\n}\n\napp.post(\"/\", jsonParser, async function (req, res, next) {\n  let result = await main(req.body.artistName);\n  res.json(result);\n});\n\napp.listen(PORT, function() {\n  console.log(`Server is running on: ${PORT}`);\n});\n"]},"metadata":{},"sourceType":"module"}